require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe SaleItemsController do
  

  let(:owner) { mock_model(User, :id => 33) }
  let(:shop) { stub_model(Shop, :id => 13, :user => owner)}
    
  before(:each) do
    owner.stub(:shop => shop)
    Shop.stub(:find).and_return shop
  end
  
  %w{delete post put get}.each do |method|
    class_eval <<-EO_CODE
    def #{method}_with_shop_id(*args)
      args << {} unless args.last.is_a? Hash
      args.last[:shop_id] = shop.id.to_s
      #{method}_without_shop_id(*args)
    end
    alias_method_chain :#{method}, :shop_id
    EO_CODE
  end

  def mock_sale_item(stubs={:name => "SIName", :description => "SIDesc", :total_cost => "11.11", :price => "33.33"})
    @mock_sale_item ||= mock_model(SaleItem, stubs).as_null_object
  end

  describe "when authenticated with the owner" do
    
    before do
      User.stub(:find).and_return(owner)
      sign_in owner
    end

    describe "GET index" do
      let!(:sale_items) { [mock_sale_item] }
      
      before(:each) do
        shop.should_receive(:sale_items).and_return(sale_items)
        get :index
      end
      
      it "assigns all sale_items as @sale_items" do
        assigns(:sale_items).should eq([mock_sale_item])
      end
      
      it { should assign_to(:shop) }
    end

    describe "GET show" do
      before do
        SaleItem.stub(:find).with("37") { mock_sale_item }
        get :show, :id => "37"
      end
      
      it "assigns the requested sale_item as @sale_item" do
        assigns(:sale_item).should be(mock_sale_item)
      end
      it { should assign_to(:shop) }
    end

    describe "GET new" do
      before do
        SaleItem.stub(:new) { mock_sale_item }
        get :new
      end
      
      it "assigns a new sale_item as @sale_item" do
        assigns(:sale_item).should be(mock_sale_item)
      end
      it { should assign_to(:shop) }
    end

    describe "GET edit" do
      before do
        SaleItem.stub(:find).with("37") { mock_sale_item }
        get :edit, :id => "37"
      end
      
      it "assigns the requested sale_item as @sale_item" do
        assigns(:sale_item).should be(mock_sale_item)
      end
      it { should assign_to(:shop) }
    end

    describe "POST create" do
      it "assigns the shop" do
        mock_sale_item.should_receive(:save)
        mock_sale_item.should_receive(:shop=)
        SaleItem.stub(:new).with({'these' => 'params'}) { mock_sale_item }
        post :create, :sale_item => {'these' => 'params'}
      end
      
      it "should assign to @shop" do
        SaleItem.stub(:new) { mock_sale_item(:save => true) }
        post :create, :sale_item => {}
        should assign_to(:shop)
      end
    
      describe "with valid params" do
        it "assigns a newly created sale_item as @sale_item" do
          SaleItem.stub(:new).with({'these' => 'params'}) { mock_sale_item(:save => true) }
          post :create, :sale_item => {'these' => 'params'}
          assigns(:sale_item).should be(mock_sale_item)
        end

        it "redirects to the created sale_item" do
          SaleItem.stub(:new) { mock_sale_item(:save => true) }
          post :create, :sale_item => {}
          response.should redirect_to(shop_sale_item_url(shop, mock_sale_item))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved sale_item as @sale_item" do
          SaleItem.stub(:new).with({'these' => 'params'}) { mock_sale_item(:save => false) }
          post :create, :sale_item => {'these' => 'params'}
          assigns(:sale_item).should be(mock_sale_item)
        end

        it "re-renders the 'new' template" do
          SaleItem.stub(:new) { mock_sale_item(:save => false) }
          post :create, :sale_item => {}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      it "should assign a shop" do
        SaleItem.stub(:find).with("37") { mock_sale_item }
        put :update, :id => "37" 
        should assign_to(:shop)
      end
      
      describe "with valid params" do
        it "updates the requested sale_item" do
          SaleItem.stub(:find).with("37") { mock_sale_item }
          mock_sale_item.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, :id => "37", :sale_item => {'these' => 'params'}
        end

        it "assigns the requested sale_item as @sale_item" do
          SaleItem.stub(:find) { mock_sale_item(:update_attributes => true) }
          put :update, :id => "1"
          assigns(:sale_item).should be(mock_sale_item)
        end

        it "redirects to the sale_item" do
          SaleItem.stub(:find) { mock_sale_item(:update_attributes => true) }
          put :update, :id => "1"
          response.should redirect_to(shop_sale_item_url(shop, mock_sale_item))
        end
      end

      describe "with invalid params" do
        it "assigns the sale_item as @sale_item" do
          SaleItem.stub(:find) { mock_sale_item(:update_attributes => false) }
          put :update, :id => "1"
          assigns(:sale_item).should be(mock_sale_item)
        end

        it "re-renders the 'edit' template" do
          SaleItem.stub(:find) { mock_sale_item(:update_attributes => false) }
          put :update, :id => "1"
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested sale_item" do
        SaleItem.stub(:find).with("37") { mock_sale_item }
        mock_sale_item.should_receive(:destroy)
        delete :destroy, :id => "37"
      end

      it "redirects to the sale_items list" do
        SaleItem.stub(:find) { mock_sale_item }
        delete :destroy, :id => "1"
        response.should redirect_to(shop_sale_items_url(shop.id))
      end
    end
  
    describe "GET add_product" do
      before  do
        SaleItem.stub(:find).and_return(mock_sale_item)
      end
      
      it "retrieves the avaliable products" do
        shop=mock(:shop)
        mock_sale_item.stub(:shop).and_return(shop)
        shop.should_receive(:products).and_return([])
        get_without_shop_id :add_product, :id => "1"
      end
      
      xit "assigns the list of products" do
        
      end
    end
  end
end
